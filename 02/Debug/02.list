
02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000270  08000270  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000270  08000270  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000270  08000270  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000270  08000270  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000270  08000270  00010270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000274  08000274  00010274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000278  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800027c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800027c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c52  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004bd  00000000  00000000  00020c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000180  00000000  00000000  00021140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000138  00000000  00000000  000212c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dff8  00000000  00000000  000213f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e5d  00000000  00000000  0002f3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057934  00000000  00000000  0003124d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00088b81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003e4  00000000  00000000  00088bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000258 	.word	0x08000258

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08000258 	.word	0x08000258

08000108 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
	#warning "FPU is not inicialized, but the project is compiling for an FPU"
#endif

int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOCEN; // enable
 800010c:	4b11      	ldr	r3, [pc, #68]	; (8000154 <main+0x4c>)
 800010e:	695a      	ldr	r2, [r3, #20]
 8000110:	4b10      	ldr	r3, [pc, #64]	; (8000154 <main+0x4c>)
 8000112:	21e0      	movs	r1, #224	; 0xe0
 8000114:	0309      	lsls	r1, r1, #12
 8000116:	430a      	orrs	r2, r1
 8000118:	615a      	str	r2, [r3, #20]
	GPIOA->MODER |= GPIO_MODER_MODER4_0; // LED1 = PA4, output
 800011a:	2390      	movs	r3, #144	; 0x90
 800011c:	05db      	lsls	r3, r3, #23
 800011e:	681a      	ldr	r2, [r3, #0]
 8000120:	2390      	movs	r3, #144	; 0x90
 8000122:	05db      	lsls	r3, r3, #23
 8000124:	2180      	movs	r1, #128	; 0x80
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	430a      	orrs	r2, r1
 800012a:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER0_0; // LED2 = PB0, output
 800012c:	4b0a      	ldr	r3, [pc, #40]	; (8000158 <main+0x50>)
 800012e:	681a      	ldr	r2, [r3, #0]
 8000130:	4b09      	ldr	r3, [pc, #36]	; (8000158 <main+0x50>)
 8000132:	2101      	movs	r1, #1
 8000134:	430a      	orrs	r2, r1
 8000136:	601a      	str	r2, [r3, #0]
	GPIOC->PUPDR |= GPIO_PUPDR_PUPDR0_0; // S2 = PC0, pullup
 8000138:	4b08      	ldr	r3, [pc, #32]	; (800015c <main+0x54>)
 800013a:	68da      	ldr	r2, [r3, #12]
 800013c:	4b07      	ldr	r3, [pc, #28]	; (800015c <main+0x54>)
 800013e:	2101      	movs	r1, #1
 8000140:	430a      	orrs	r2, r1
 8000142:	60da      	str	r2, [r3, #12]
	GPIOC->PUPDR |= GPIO_PUPDR_PUPDR1_0; // S1 = PC1, pullup
 8000144:	4b05      	ldr	r3, [pc, #20]	; (800015c <main+0x54>)
 8000146:	68da      	ldr	r2, [r3, #12]
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <main+0x54>)
 800014a:	2104      	movs	r1, #4
 800014c:	430a      	orrs	r2, r1
 800014e:	60da      	str	r2, [r3, #12]

  while (1)
 8000150:	e7fe      	b.n	8000150 <main+0x48>
 8000152:	46c0      	nop			; (mov r8, r8)
 8000154:	40021000 	.word	0x40021000
 8000158:	48000400 	.word	0x48000400
 800015c:	48000800 	.word	0x48000800

08000160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000164:	e7fe      	b.n	8000164 <NMI_Handler+0x4>

08000166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000166:	b580      	push	{r7, lr}
 8000168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800016a:	e7fe      	b.n	800016a <HardFault_Handler+0x4>

0800016c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000170:	46c0      	nop			; (mov r8, r8)
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}

08000176 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000176:	b580      	push	{r7, lr}
 8000178:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800017a:	46c0      	nop			; (mov r8, r8)
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}

08000180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000184:	f000 f832 	bl	80001ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000188:	46c0      	nop			; (mov r8, r8)
 800018a:	46bd      	mov	sp, r7
 800018c:	bd80      	pop	{r7, pc}

0800018e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800018e:	b580      	push	{r7, lr}
 8000190:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000192:	46c0      	nop			; (mov r8, r8)
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}

08000198 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000198:	480d      	ldr	r0, [pc, #52]	; (80001d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800019a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800019c:	480d      	ldr	r0, [pc, #52]	; (80001d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800019e:	490e      	ldr	r1, [pc, #56]	; (80001d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001a0:	4a0e      	ldr	r2, [pc, #56]	; (80001dc <LoopForever+0xe>)
  movs r3, #0
 80001a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001a4:	e002      	b.n	80001ac <LoopCopyDataInit>

080001a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001aa:	3304      	adds	r3, #4

080001ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001b0:	d3f9      	bcc.n	80001a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001b2:	4a0b      	ldr	r2, [pc, #44]	; (80001e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001b4:	4c0b      	ldr	r4, [pc, #44]	; (80001e4 <LoopForever+0x16>)
  movs r3, #0
 80001b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001b8:	e001      	b.n	80001be <LoopFillZerobss>

080001ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001bc:	3204      	adds	r2, #4

080001be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001c0:	d3fb      	bcc.n	80001ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001c2:	f7ff ffe4 	bl	800018e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80001c6:	f000 f823 	bl	8000210 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001ca:	f7ff ff9d 	bl	8000108 <main>

080001ce <LoopForever>:

LoopForever:
    b LoopForever
 80001ce:	e7fe      	b.n	80001ce <LoopForever>
  ldr   r0, =_estack
 80001d0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80001d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001d8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80001dc:	08000278 	.word	0x08000278
  ldr r2, =_sbss
 80001e0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80001e4:	20000024 	.word	0x20000024

080001e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001e8:	e7fe      	b.n	80001e8 <ADC1_IRQHandler>
	...

080001ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001f0:	4b05      	ldr	r3, [pc, #20]	; (8000208 <HAL_IncTick+0x1c>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	001a      	movs	r2, r3
 80001f6:	4b05      	ldr	r3, [pc, #20]	; (800020c <HAL_IncTick+0x20>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	18d2      	adds	r2, r2, r3
 80001fc:	4b03      	ldr	r3, [pc, #12]	; (800020c <HAL_IncTick+0x20>)
 80001fe:	601a      	str	r2, [r3, #0]
}
 8000200:	46c0      	nop			; (mov r8, r8)
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	46c0      	nop			; (mov r8, r8)
 8000208:	20000000 	.word	0x20000000
 800020c:	20000020 	.word	0x20000020

08000210 <__libc_init_array>:
 8000210:	b570      	push	{r4, r5, r6, lr}
 8000212:	2600      	movs	r6, #0
 8000214:	4d0c      	ldr	r5, [pc, #48]	; (8000248 <__libc_init_array+0x38>)
 8000216:	4c0d      	ldr	r4, [pc, #52]	; (800024c <__libc_init_array+0x3c>)
 8000218:	1b64      	subs	r4, r4, r5
 800021a:	10a4      	asrs	r4, r4, #2
 800021c:	42a6      	cmp	r6, r4
 800021e:	d109      	bne.n	8000234 <__libc_init_array+0x24>
 8000220:	2600      	movs	r6, #0
 8000222:	f000 f819 	bl	8000258 <_init>
 8000226:	4d0a      	ldr	r5, [pc, #40]	; (8000250 <__libc_init_array+0x40>)
 8000228:	4c0a      	ldr	r4, [pc, #40]	; (8000254 <__libc_init_array+0x44>)
 800022a:	1b64      	subs	r4, r4, r5
 800022c:	10a4      	asrs	r4, r4, #2
 800022e:	42a6      	cmp	r6, r4
 8000230:	d105      	bne.n	800023e <__libc_init_array+0x2e>
 8000232:	bd70      	pop	{r4, r5, r6, pc}
 8000234:	00b3      	lsls	r3, r6, #2
 8000236:	58eb      	ldr	r3, [r5, r3]
 8000238:	4798      	blx	r3
 800023a:	3601      	adds	r6, #1
 800023c:	e7ee      	b.n	800021c <__libc_init_array+0xc>
 800023e:	00b3      	lsls	r3, r6, #2
 8000240:	58eb      	ldr	r3, [r5, r3]
 8000242:	4798      	blx	r3
 8000244:	3601      	adds	r6, #1
 8000246:	e7f2      	b.n	800022e <__libc_init_array+0x1e>
 8000248:	08000270 	.word	0x08000270
 800024c:	08000270 	.word	0x08000270
 8000250:	08000270 	.word	0x08000270
 8000254:	08000274 	.word	0x08000274

08000258 <_init>:
 8000258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800025e:	bc08      	pop	{r3}
 8000260:	469e      	mov	lr, r3
 8000262:	4770      	bx	lr

08000264 <_fini>:
 8000264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800026a:	bc08      	pop	{r3}
 800026c:	469e      	mov	lr, r3
 800026e:	4770      	bx	lr
